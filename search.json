[{"title":"使用 F5-TTS 生成 AI 角色語音","url":"//posts/use-f5-tts-generate-character-voice/","content":"\nF5-TTS 是一種能夠將文字快速轉換為自然語音的 AI 模型，是以 FastSpeech 2 為基礎、進一步改良的 TTS 架構。\n\n最近看到很多迷因影片用一些角色人物去配音，所以這次想試試透過 F5-TTS 來測試一下使用指定角色的語音檔去生成角色的配音，具體也可以應用在有聲書、客服語音機器人…等等，本次使用 [SWivid/F5-TTS](https://github.com/SWivid/F5-TTS) 這個開源專案來實作。\n\n## 一、環境設置\n\n- Windows 11\n- NVIDIA GeForce RTX 3060 Ti\n- Python 3.11.4\n\n### 1. 安裝 ffmpeg 工具\n需要有 ffmpeg 工具，才能正常處理音訊檔案，所以我們必須要安裝 ffmpeg 並加入環境變數，Windows 的具體安裝方法請參考 [如何在 Windows 系統上安裝 FFmpeg](https://the-walking-fish.com/p/install-ffmpeg-on-windows/)\n\n安裝完成後，執行指令確認可正常使用\n```bash\nffmpeg -version\n```\n\n\n### 2. 將 F5-TTS 專案從 github clone 下來\n```bash\ngit clone https://github.com/SWivid/F5-TTS.git\ncd F5-TTS\n```\n### 3. 建立虛擬環境\n```bash\npython -m venv venv\n\n# Windows PowerShell 啟用環境\n.\\venv\\Scripts\\activate.ps1\n```\n\n\n### 4. 安裝依賴套件\n我的 GPU 是 NVIDIA GeForce RTX 3060 Ti，驅動版本為 560.94，根據我目前適合的 CUDA 版本去安裝 PyTorch\n```bash\npip install torch==2.1.2+cu118 torchvision==0.16.2+cu118 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cu118\n```\n\n```bash\npip install -e .\n```\n\n### 5. 啟動服務\n```bash\nf5-tts_infer-gradio\n```\n成功後，可進到 http://127.0.0.1:7860/ ，會看到 Gardio 的 E2/F5 TTS 功能畫面\n\n![F5-TTS](https://i.imgur.com/sEBwC66.png)\n\n\nP.S. 一開始因為我安裝的 PyTorch 版本不對，結果出現下面這個錯誤\n```\nOSError: [WinError 126] 找不到指定的模組。 Error loading \"C:\\Dev\\www\\F5-TTS\\venv\\Lib\\site-packages\\torch\\lib\\fbgemm.dll\" or one of its dependencies.\n```\n原因是 PyTorch 版本與我目前顯卡的 CUDA 版本不符，所以要卸載後再重新安裝\n```bash\npip uninstall torch torchvision torchaudio\n\n# 請確認你電腦目前適合的版本去安裝\npip install torch==2.1.2+cu118 torchvision==0.16.2+cu118 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cu118\n```\n\n重新安裝後，再嘗試檢查一下 torch，確認沒問題後，再啟動 f5-tts_infer-gradio 一次\n```bash\n# 成功後會 print 出 2.1.2 True\npython -c \"import torch; print(torch.__version__); print(torch.cuda.is_available())\"\n```\n\n## 二、生成角色語音\n\n進到 http://127.0.0.1:7860/ ，會成功看到 Gardio 的 E2/F5 TTS 功能畫面，接著就可以開始製作角色的語音了\n\n### 1. 上傳角色語音檔\n你可以上傳一段大概 12 秒左右的角色語音檔，那我這邊是直接上傳一個「來自真新鎮的小智.mp3」 語音檔，它有提供截取、直接錄音等功能\n\n![F5-TTS](https://i.imgur.com/TXoUjkV.png)\n\n### 2. 輸入文本\n接著輸入你想要生成的語音文本，中英文都可以，我這邊輸入一個「南港展覽館的館長掌管的官方觀光網站綻放萬丈光芒」繞口令給它\n\n下面還有一些進階的設定，可以自由調整。\n\n![F5-TTS](https://i.imgur.com/7x80svn.png)\n\n### 3. 開始生成\n\n按下 Synthesize，回到 cmd line 會看到程式正在解析與生成，首次使用因為需要下載安裝一些依賴會比較久，完成後回到 Gardio 網頁，就會看到已經生成好的語音了！\n\n![F5-TTS](https://i.imgur.com/ctU6Arb.png)\n\n## 三、總結\n\n中間過程也有遇到不少環境版本的問題，以及缺少的依賴工具，不過多問問 AI 還是可以排查解決。\n\n總體來說，效果還可以，只要上傳短短 12 秒的語音，就有不錯的效果，只是還是有些小缺點，包含像中文語句的斷句，有時沒有這麼流暢，這次就先簡單實驗到這裡。","tags":["AI","Windows","TTS"],"categories":["應用工具"]},{"title":"實作 MCP Server：以「電子雞養成遊戲」為例","url":"//posts/tamagotchi-mcp-server/","content":"本文介紹我如何使用 Python、FastAPI 實作一個 MCP Server，透過一個簡化的電子雞養成遊戲作為案例。主要目的是探索和學習 MCP Server 的功能，而非深入開發遊戲本身。因此，遊戲設計保持簡單，僅作為展示 MCP Server 應用的基礎。\n\n## 背景與目標\n\n[MCP 是什麼？](https://www.anthropic.com/news/model-context-protocol) MCP 是一種開放協定，讓 AI 透過標準化方式與外部工具互動，存取所需的服務與數據，適合用於構建工具化的服務，透過定義工具（Tools）和資源（Resources）實現與 Client 端的互動。\n\n本次我選擇以一個虛擬小雞養成遊戲為原型，來實作 MCP Server，旨在熟悉其架構和應用方式。該遊戲靈感源自電子雞（Tamagotchi），包含基本的狀態管理和玩家互動，但僅實現核心功能以支持學習目標。\n\n本次目標：\n- 利用 FastAPI 作為後端，開發遊戲所需 API，提供狀態儲存與更新。\n- 開發遊戲用 MCP Server 存取遊戲所需的服務與數據。\n- 使用 AI 搭配 MCP Server 提供前端互動介面，達成遊玩效果。\n\n## 實作過程\n\n### 環境設置與架構\n\n本次選用 Python 作為開發語言，開始前確保本地已有 Python 3 環境。\n\n專案分為兩個主要部分：\n- tamagotchi.py：FastAPI 後端，負責資料管理和 API 端點。\n- server.py：MCP Server，負責作為串接 AI 的命令處理與回應生成。\n\n#### 環境設置\n\n```bash\n# 建立虛擬環境\npython3 -m venv tamagotchi-mcp-env\n\n# 使用虛擬環境\nsource tamagotchi-mcp-env/bin/activate\n\n# 安裝依賴套件\npip install fastapi uvicorn requests aiohttp mcp\npip install \"mcp[cli]\"\n```\n\n### FastAPI 遊戲功能實作\n\n遊戲設計只加入了基本的養成元素：\n\n- 屬性：飢餓、快樂、能量、健康、髒亂。\n- 時間機制：根據 last_interaction 計算時間變化，增減各項屬性，如若超過 12 小時未互動，健康下降。\n- 回應：簡單的遊戲化訊息。\n\nFastAPI 後端負責管理小雞的狀態，並將資料儲存於 `tamagotchi.json` 文件檔案。\n\n功能包括：\n- 狀態初始化：建立初始小雞資料，預設名稱為「小雞」，從蛋階段開始。\n- 狀態更新：根據時間差計算屬性變化，例如飢餓隨時間增加。\n- 動作處理：支援基本的玩家動作，如餵食和改名。\n\n核心程式碼如下（簡化版本）：\n```python\nfrom fastapi import FastAPI\nimport json\nimport os\nfrom datetime import datetime\n\napp = FastAPI()\nPET_FILE = \"pet_state.json\"\n\ndef init_pet():\n    if not os.path.exists(PET_FILE):\n        default_pet = {\n            \"name\": \"小雞\",\n            \"stage\": \"egg\",\n            \"hunger\": 0,\n            \"happiness\": 0,\n            \"energy\": 100,\n            \"health\": 100,\n            \"mess\": 0,\n            \"age\": 0,\n            \"last_updated\": datetime.now().isoformat(),\n            \"last_interaction\": datetime.now().isoformat(),\n            \"last_event\": \"蛋正在孵化中...\",\n            \"runaway\": False\n        }\n        with open(PET_FILE, \"w\") as f:\n            json.dump(default_pet, f)\n\n@app.get(\"/pet/status\")\ndef get_pet_status():\n    init_pet()\n    pet = json.load(open(PET_FILE, \"r\"))\n    # 時間更新邏輯 (以下略)\n    json.dump(pet, open(PET_FILE, \"w\"))\n    return pet\n\n@app.post(\"/pet/update\")\ndef update_pet_status(action: dict):\n    init_pet()\n    pet = json.load(open(PET_FILE, \"r\"))\n    # 動作處理邏輯略 (以下略)\n    json.dump(pet, open(PET_FILE, \"w\"))\n    return pet\n```\n\n後端啟動指令：\n```\nuvicorn tamagotchi:app --host 0.0.0.0 --port 8000\n```\n\n### MCP Server 的實作\nMCP Server 是客戶端的互動介面，使用 FastMCP 類定義功能。我實現了以下工具和資源：\n\n#### 工具 (Tool)\n- get_pet_status：查詢小雞狀態。\n- update_pet_status：處理玩家動作。\n- set_pet_name：更改小雞名稱。\n- get_game_instructions：提供簡要遊戲說明。\n\n#### 資源 (Resource)\n- discovery://info：返回服務資訊和小雞狀態概覽。\n\nMCP Server 程式碼（server.py）如下（簡化版本）：\n```python\nfrom mcp.server.fastmcp import FastMCP\nimport aiohttp\n\nFASTAPI_BASE_URL = \"http://localhost:8000\"\nmcp = FastMCP(\"VirtualPetServer\", description=\"A virtual chick game\")\n\n@mcp.tool()\nasync def get_pet_status() -> dict:\n    async with aiohttp.ClientSession() as session:\n        async with session.get(f\"{FASTAPI_BASE_URL}/pet/status\") as response:\n            pet_data = await response.json()\n            return {\"message\": f\"【{pet_data['name']}】\\n狀態: ...\", \"data\": pet_data}\n\n@mcp.tool()\nasync def update_pet_status(action: str, value: int = 20) -> dict:\n    payload = {\"action\": action, \"value\": value}\n    async with aiohttp.ClientSession() as session:\n        async with session.post(f\"{FASTAPI_BASE_URL}/pet/update\", json=payload) as response:\n            pet_data = await response.json()\n            return {\"message\": f\"【行動結果】\\n{pet_data['last_event']}\", \"data\": pet_data}\n\n@mcp.resource(\"discovery://info\")\nasync def mcp_discovery() -> dict:\n    async with aiohttp.ClientSession() as session:\n        async with session.get(f\"{FASTAPI_BASE_URL}/mcp/discovery\") as response:\n            base_info = await response.json()\n        async with session.get(f\"{FASTAPI_BASE_URL}/pet/status\") as status_response:\n            pet_data = await status_response.json()\n        return {\n            \"message\": f\"歡迎來到 {pet_data['name']} 的世界！\\n狀態概覽: ...\",\n            \"technical_info\": base_info\n        }\n\nif __name__ == \"__main__\":\n    mcp.run()\n```\n\n\n### 配置 Claude Desktop\n為了讓 MCP Server 與 AI 工具（如 Claude Desktop）整合，需要配置於 Claude Desktop 的設定檔中。以下是配置步驟：\n1. 編輯 Claude Desktop 配置檔案：\n\n> 在 Claude Desktop 的設定檔，添加以下內容，將我們的 MCP Server 註冊為可用服務：\n> MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n> Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"tamagotchi-mcp-server\": {\n      \"command\": \"/path/to/your/tamagotchi-mcp-server/tamagotchi-mcp-env/bin/python3\",\n      \"args\": [\"/path/to/your/tamagotchi-mcp-server/server.py\"]\n    }\n  }\n}\n```\n- command：指向虛擬環境中的 Python 可執行檔路徑。\n- args：指定 MCP Server 的程式檔案路徑。\n- 需將 /path/to/your/tamagotchi-mcp-server 替換為實際專案目錄。\n\n2. 啟動 Claude Desktop：\n配置完成後，啟動 Claude Desktop，它會自動載入並運行 MCP Server，讓 AI 能夠透過命令與遊戲互動。\n<b>ps. 請注意，每次修改設定檔都必須要重啟 Claude Desktop 才會生效</b>\n\n\n## 實作成果\n完成配置後，我可以透過 Claude Desktop 直接輸入這些自然語言指令，AI 會解析並呼叫對應的 MCP 工具，實現互動。\n\n以下是支援的基本動作及其對應功能，包含：\n\n- 「幫小雞取名字」：更改小雞名稱。\n- 「查看小雞狀況」：查詢當前狀態。\n- 「搖晃蛋」：加速蛋的孵化。\n- 「餵小雞吃飯」：降低飢餓。\n- 「跟小雞玩」：提升快樂。\n- 「讓小雞休息」：恢復能量。\n- 「幫小雞洗澡」：減少髒亂。\n- 「帶小雞看醫生」：恢復健康。\n- 「清理小雞的窩」：減少髒亂。\n\n成果出來感覺還不錯，遊戲雖然簡單，但用來摸索 MCP 已經很夠用了，之後可以再來試點新東西。\n\nGitHub 完整版：[tamagotchi-mcp-server](https://github.com/wai-imyen/tamagotchi-mcp-server)","tags":["AI","MCP Server","Python"],"categories":["程式開發"]},{"title":"日常實用 AI Prompt 分享","url":"//posts/useful-prompt/","content":"\n日常收集的一些實用 AI 提示詞，方便隨時複製貼上就能用，包含：好用的提示詞模式、實用框架收藏、日常實用模板等等。\n\n## 一、好用的提示詞模式\n\n### 認知驗證模式 (Cognitive Verifier Pattern)\n\n當遇到複雜問題時，可以讓 AI 分解更深入的問題。\n\n```\n當我問你一個問題時，生成三個相關輔助問題並回答它們。然後綜合這些答案來回答我的原始問題。\n```\n\n<!--more-->\n\n### 元提示模式 (Meta Prompt Pattern)\n\n不確定自己的提示詞寫得好不好，可以用這個讓 AI 幫你改進。\n\n```\n接下來，我會提供一個提示。請分析其清晰度和有效性，並提出改進建議。\n```\n\n## 二、實用框架收藏\n\n### RACE 框架（Role, Action, Context, Expectations）\n\n讓AI扮演專家角色，提供專業建議的好方法：\n\n```\n扮演數據科學家（Role），分析以下數據集（Action），背景是零售銷售分析（Context），並提供改進建議（Expectations）。\n```\n\n### ITAP 框架（Input, Task, Annotation, Prediction）\n\n適合處理數據和文字分析：\n\n```\n輸入數據是一段文本（Input），任務是分類情緒（Task），添加情緒標籤（Annotation），輸出格式為\"正面/中立/負面\"（Prediction）。\n```\n\n### COAST 框架（Character, Objectives, Actions, Scenario, Task）\n\n想要創意內容或故事性內容：\n\n```\n扮演歷史學家（Character），目標是分析古代文明間的貿易路線（Objectives），描述每個路線的重要性（Actions）和背景故事（Scenario）。\n```\n\n## 三、日常實用模板\n\n### 提示詞改進\n\n不確定自己寫的提示詞好不好時，可以 AI 幫忙調整：\n\n```\n你是一位專業 Prompt 工程師，擅長優化提示以獲得最佳結果。當我提供一個初始提示時，你需要：\n1. 評估提示是否清晰、具體且有效。\n2. 修改提示以提高回應質量和相關性。\n3. 解釋修改原因並提出改進建議。\n規則：\n1. 使用 Markdown 格式撰寫回應，以便於閱讀和比較版本差異。\n2. 確保修改後的提示不超過 1500 字。\n```\n\n### 數據分析\n\n當你有數據需要快速分析時：\n\n```\n任務描述：請分析以下數據並提供建議。\n數據背景：[簡要說明數據集或問題，例如\"銷售數據下降原因\"]\n分析方法：[指定方法，例如\"趨勢分析、回歸模型\"]\n輸出要求：\n- 提供三個關鍵發現\n- 每個發現後附帶一條改進建議\n格式：\n發現1：[關鍵發現]  \n建議1：[改進建議]\n\n發現2：[關鍵發現]  \n建議2：[改進建議]\n\n發現3：[關鍵發現]  \n建議3：[改進建議]\n```\n\n### 程式碼生成\n\n需要寫代碼但不想動腦：\n\n```\n任務描述：請用[編程語言]實現以下功能。\n功能需求：[功能描述，例如\"計算兩個數的最大公約數\"]\n輸入：[輸入參數及其類型說明，例如\"兩個整數\"]\n輸出：[返回值及其類型說明，例如\"一個整數\"]\n代碼格式：\n```\n\n### 內容創作\n\n需要寫部落格或文章大綱時：\n\n```\n任務描述：請為以下主題撰寫博客大綱。\n主題：[主題名稱]\n目標讀者：[目標群體，如開發者、新手用戶等]\n輸出要求：\n- 大綱應包括一個主標題和至少三個小節，每個小節用一句話概述其內容。\n格式：\n主標題：[插入主標題]\n1. [小節標題] - [一句話描述]\n2. [小節標題] - [一句話描述]\n3. [小節標題] - [一句話描述]\n```\n","tags":["AI"],"categories":["應用工具"]},{"title":"CentOS 8 架設 LAMP","url":"//posts/build-centos-8-lamp/","content":"\n{% note info %}\n**僅作為個人紀錄使用**\n{% endnote %}\n\n## 1. 安裝 Apache\n\n```bash\nsudo yum -y install httpd\n```\n\n## 2. 加入  EPEL 套件庫\n\n```bash\nsudo yum -y install epel-release\nsudo rpm -Uvhhttp://rpms.famillecollet.com/enterprise/remi-release-8.rpm\n```\n\n<!--more-->\n\n## 3. 更新套件\n\n```bash\nsudo yum -y update\n```\n\n## 4. 安裝 PHP\n\n```bash\ndnf module install php:remi-7.3\nsudo yum install php php-common  php-pdo php-gd php-xml -y\n```\n\n## 5. 依需求，編輯 /etc/php.ini 設定檔\n\n```bash\nsudo vi /etc/php.ini\n```\n\n```\ndate.timezone = \"Asia/Taipei\" #修改台灣時區\nmax_execution_time = 300\nshort_open_tag = On\nmax_input_time = 180\nmemory_limit = 512M\npost_max_size = 512M\nupload_max_filesize = 100M\nmax_file_uploads = 50\nmax_input_vars = 1500\n```\n\n## 6. 視情況可修改設定檔 (ex: 修改目錄, 修改權限... 等)\n\n```bash\nsudo vi /etc/httpd/conf/httpd.conf\n```\n\nex: 開啟 .htaccess 作用\n\n找到 DocumentRoot /var/www/html下的Directory，並將AllowOverride改為 All\n\n```\n<Directory /var/www/html/>\nAllowOverride All\n</Directory>\n\n```\n\n## 7. 重啟apache 並設定開機自動啟動\n\n```bash\nsudo systemctl restart httpd\nsudo systemctl enable httpd\n```\n\n## 8. 允許Http和MySQL通過防火牆 (需已裝過 firewall)\n\nps. 若為AWS, GCP等雲端主機則使用控制台的 Security Group 設定即可\n\n```bash\nsudo firewall-cmd --permanent --zone=public --add-service=http\nsudo firewall-cmd --permanent --zone=public --add-service=https\nsudo firewall-cmd --permanent --zone=public --add-service=mysql\nsudo firewall-cmd --reload\nsudo firewall-cmd --zone=public --list-all\n```\n\n此時可建立一個 PHP 測試檔至 網站目錄 (/var/www/html) 查看是否正常運行\n\n```bash\nsudo vi /var/www/html/test.php\n```\n\n## 9. 加入 MariaDB 套件庫 ：\n\n```bash\nsudo vi /etc/yum.repos.d/MariaDB.repo\n```\n\n```\n# 貼上以下內容並儲存\n\n[mariadb]\nname = MariaDB\nbaseurl =http://yum.mariadb.org/10.4/centos8-amd64\nGpgkey =https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\nGpgcheck = 1\n```\n\n```bash\nsudo yum -y install mariadb-server\nsudo systemctl start mariadb    # 啟動 mariadb\nsudo systemctl enable mariadb # 開機自動啟動\nsudo mysql_secure_installation  # 初始化設定\n```\n\n```\n該設定時會詢問幾個問題，簡述如下：\n* Enter current password for root (enter for none)：輸入root密碼，第一次設定時預設值是空的，所以直接按Enter即可，接著會詢問是否要設定root密碼，請輸入「Y」進行設定\n* Remove anonymous users? [Y/n]：是否要移除匿名使用者？「Y」\n* Disallow root login remotely? [Y/n]：是否關閉 root 遠端登功能？依需求決定\n* Remove test database and access to it? [Y/n]：是否要移除測試的資料庫？建議選擇「Y」來移除\n* Reload privilege tables now? [Y/n]：是否要重新載入表格權限？建議選擇「Y」\n\n```\n\n## 10. 安裝phpMyAdmin (在/var/www/html下)\n\n```bash\nsudo yum install -y php-mysqlnd\nsudo yum -y install wget\nsudo wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz\nsudo mkdir phpMyAdmin && sudo tar -xvzf phpMyAdmin-latest-all-languages.tar.gz -C phpMyAdmin --strip-components 1\n```\n\n## 11. 重新啟動 Apache\n\n```bash\nsudo systemctl restart httpd\n```\n\n## 12. 關閉SELINUX，避免產生權限問題\n\n```bash\nsudo setenforce 0  # 暫時性設定\nsudo vi /etc/selinux/config # 永久性設定 => 修改 SELINUX = disabled\n```\n\n## 13. 設定檔案權限\n\n```bash\nsudo usermod -a -G apache root # 加入root帳號到apache群組\nsudo chown -R root:apache /var/www\nsudo chmod 2775 /var/www\nfind /var/www -type d -exec sudo chmod 2775 {} \\;\nfind /var/www -type f -exec sudo chmod 0664 {} \\;\n```","tags":["網站架設","Linux","CentOS","PHP"],"categories":["網站架設"]},{"title":"Xampp 更新 PHP 7 版本（Windows）","url":"//posts/windows-xampp-upgrade-php-7/","content":"\n{% note info %}\n**僅作為個人紀錄使用**\n{% endnote %}\n\n### 1. 下載 PHP\n前往  https://windows.php.net/download/ \n\n下載 PHP 適合電腦位元的 php7 版本 zip 檔，注意需選擇 \"Thread Safe\" 的版本\n\n<!--more-->\n\n![Xampp-PHP](https://i.imgur.com/vT0MvPV.png)\n\n### 2. 解壓縮 & 重新命名\n解壓縮 zip 檔， 並將檔案資料夾命名為 php，將此資料夾放至 xampp 資料夾中，原本存在 xampp 的 php 資料夾則另外命名\n\n![Xampp-PHP](https://i.imgur.com/IwbOY2d.png)\n\n### 3. 修改 httpd-xampp.conf\n至 XAMPP 控制面版，點選 Config 按鈕，開啟 httpd-xampp.conf 檔，並依下列說明修改檔案內容：\n\n![Xampp-PHP](https://i.imgur.com/JvX0Hok.png)\n\n#### 3.1 修改 php 版本\n找到下列的文字，修改下面黃底的文字內容\n\nps. 請確認修改路徑的檔案真實存在，若無此檔案，代表你可能載錯 php 版本囉！\n\n修改前：\n\n```\nLoadFile \"C:/xampp/php/php5ts.dll\"\nLoadFile \"C:/xampp/php/libpq.dll\"\nLoadModule php5_module \"C:/xampp/php/php5apache2_4.dll\"\n\n```\n\n修改後：\n\n```\nLoadFile \"C:/xampp/php/php7ts.dll\"\nLoadFile \"C:/xampp/php/libpq.dll\"\nLoadModulephp7_module \"C:/xampp/php/php7apache2_4.dll\"\n\n```\n\n#### 3.2 修改為 php7_module\n取代 httpd-xampp.conf 下所有 \"php5_module\" 文字為 \"php7_module\"\n\n### 4. 重建 php.ini 設定檔\n更新換完 php 版本檔案後，這時要重建 php.ini 設定檔，依循下列步驟：\n\n#### 4.1 複製 php.ini\n複製 php 資料夾中的 php.ini-development，並重新命名為 php.ini\n\n#### 4.2 調整 php.ini\n打開 php.ini 檔，並依網站需求開啟相關模組，下面列幾項調整的設定：\n\n```\n# 將前面的分號刪除，開啟設定\nextension=curl\nextension=gd2\nextension=mbstring\nextension=mysqli\nextension=openssl\n\n# 要指定好載入模組的資料夾，否則網站載模組時會出錯\nextension_dir = \"ext\"\n\n# 常見設定\nmax_execution_time = 600\nshort_open_tag = On\nmax_input_time = 180\nerror_reporting=E_ALL & ~E_DEPRECATED & ~E_STRICT\nmemory_limit = 500M\npost_max_size = 500M\nupload_max_filesize = 100M\nmax_file_uploads = 50\n\n```\n\n### 5. 測試\n至 XAMPP 控制面版，重啟 Apache，即可測試看看設定是否成功","tags":["PHP","Windows","Xampp"],"categories":["網站架設"]},{"title":"robots.txt 設定","url":"//posts/robots-txt-setting/","content":"\n{% note info %}\n**僅作為個人紀錄使用**\n{% endnote %}\n\n架設網站時時常需要建置一個測試站來測試，但我們又希望測試站上的資料不要被搜尋引擎搜尋到，這時可以利用設置 robots.txt 檔案來阻擋搜尋引擎爬取！\n\n<!--more-->\n\n## 設置流程\n\n1. 創建一個 robots.txt 的檔案，命名方式必須為小寫字母 (命名不正確則無效)\n\n2. 設置 robots.txt 檔案內容\n\n3. 將 robots.txt 檔案，放置在網站根目錄裡，直接到 http://yourdomain.com/robots.txt 看看是否正確上傳檔案\n\n## 基本語法介紹\n\n- User-agent: 定義搜尋引擎\n- Disallow: 指定不想被檢索的目錄或檔案\n- Allow : 指定可被檢索的目錄或檔案\n\n## 常用設定\n\n以下介紹幾種常用的設定方法\n\n### 允許搜尋引擎爬取所有網站內容\n\n```\nUser-agent: *\nDisallow:\n\n```\n\n### 禁止搜尋引擎爬取所有網站內容\n\n```\nUser-agent: *\nDisallow: /\n\n```\n\n### 禁止搜尋引擎爬取指定檔案\n\n```\nUser-agent: *\nDisallow: /test.php\nDisallow: /contact.php\n\n```\n\n\n最後，如果想要確認自己的 robots.txt 語法是否正確的話，可使用 Google Search Console 工具來做測試，\n\n---\n\n參考： https://support.google.com/webmasters/answer/6062598?hl=zh-Hant","tags":["網站架設"],"categories":["網站架設"]},{"title":"AWS 網站架設教學：SES 發信設定","url":"//posts/aws-ses-email-setting/","content":"\n{% note info %}\n**僅作為個人紀錄使用**\n{% endnote %}\n\n登入你的AWS帳號進到主控台，並選擇 Simple Email Service，開始以下的設定：\n\n## 一、驗證網域\n\n1. 點選左邊選單的「Domains」選項，再按「Vefify a New Domain」來新增一組你的網域\n![ses-發信設定](https://i.imgur.com/i850ovf.png)\n\n<!--more-->\n\n2. 在 Domain 欄位填入你的網域，並點選「Verify This Domain」送出\n![ses-發信設定](https://i.imgur.com/lVKFrWn.png)\n\n3. 此時你會到以下畫面，這邊需要你去新增設定DNS的TXT記錄來驗證網域，Domain Verification Record下方的TXT記錄即為你所需設定的資料\n![ses-發信設定](https://i.imgur.com/QztaeYH.png)\n\n4. 回到SES介面，你會看到已新增的網域，若是TXT記錄設定失敗或尚未生效，則會顯示「pending verification」的狀態，若顯示為「verified」便完成了網域驗證的步驟\n![ses-發信設定](https://i.imgur.com/LbRZXIr.png)\n\n## 二、驗證信箱\n\n1. 點選左邊選單的「Email Addresses」選項，再按「Vefify a New Email Address」來新增信箱\n![ses-發信設定](https://i.imgur.com/wwK2Ba3.png)\n\n2. 在 Email Address 欄位填入你的網域，並點選「Verify This Email Address」送出\n![ses-發信設定](https://i.imgur.com/qx31e1Q.png)\n![ses-發信設定](https://i.imgur.com/56U2QDT.png)\n\n3. 接著到登入你的信箱，你會收到一封AWS SES發來的信箱驗證信\n\n4. 點選信件中的驗證網址，即可成功驗證信箱\n![ses-發信設定](https://i.imgur.com/Xo8yRmE.png)\n\n5. 回到SES介面，你會看到剛剛新增的信箱驗證狀態更新為「verified」，此時已完成信箱驗證的步驟\n![ses-發信設定](https://i.imgur.com/UFz8Bi8.png)\n\n## 三、建立 SMTP Credentials\n\n1. 點選左邊選單的「SMTP settings」選項，再按「Create My SMTP Credentials」新增一組SMTP登入資料\n![ses-發信設定](https://i.imgur.com/fETmWQQ.png)\n\n2. 這邊會自動產出一組IAM 使用者名稱，直接點選「建立」\n![ses-發信設定](https://i.imgur.com/KKZAVei.png)\n\n3. 這時會看到新增的SMTP使用者名稱及密碼，我們要使用此組帳密來發信，所以請務必要記下來\n![ses-發信設定](https://i.imgur.com/zH1urI6.png)\n\n4. 回到 SMTP settings 介面會看到 SMTP 發信用的 Server Name 及 Port ，再加上剛才記下來SMTP使用者名稱及密碼，即為我們所需用到的發信資料！\n![ses-發信設定](https://i.imgur.com/7r9lp4Z.png)\n\n## 四、撰寫程式，測試發信\n\n1. 使用你擅長的程式語言來撰寫發信程式\n\n2. 發信的設定參數值即為剛剛所建立的 SMTP Credentials資料，資訊輸入正確的SMTP即可成功發信囉！\n\n但要注意以下幾點：\n\n(1) AWS 預設限制阻擋由內到外的 25 port 流量，所以<b>請使用 587 或 465 port 來發信</b>\n\n(2) 若必須要使用 25 port 來發信，則需另外向AWS提出申請，請參閱 如何從 EC2 實例取消端口 25 上的限制\n\n(3) 未向AWS提出轉正式模式時，皆在沙盒模式中，僅有被驗證的信箱可拿來發信及收信，<b>要解除沙盒模式的話需另填寫表單提出申請轉正式模式</b>\n\n若是使用AWS主機的話不妨試試使用SES來發信！使用EC2的主機還有每月 62,000 封的免費額度","tags":["AWS","SES","網站架設"],"categories":["網站架設"]},{"title":"GCP SendGrid 信箱設定","url":"//posts/gcp-sendgrid-email-setting/","content":"\n{% note info %}\n**僅作為個人紀錄使用**\n{% endnote %}\n\n## 一、設定 SendGrid，並申請帳號\n\n1. 至搜尋框輸入\"sengrid email\"，並點選該項目\n\n![GCP-SendGrid](https://i.imgur.com/zo2zpgq.png)\n\n<!--more-->\n\n2. 進入「SendGrid Email API」頁面後，直接點選「開始使用免費方案」\n\n![GCP-SendGrid](https://i.imgur.com/S6H79Vb.png)\n\n3. 接著選擇使用的方案，這裡使用Free免費方案，每月最多可免費寄送12000封信件\n\n![GCP-SendGrid](https://i.imgur.com/CIGX5EX.png)\n\n4. 再來要註冊 SendGrid帳號，點選註冊\n\n![GCP-SendGrid](https://i.imgur.com/d0StDX4.png)\n\n5. 開始註冊帳號，這裡填寫的Username及Password會當作網站發信用的帳密\n\n![GCP-SendGrid](https://i.imgur.com/oKtoLhd.png)\n\n6. 送出後回到後台，即可看已訂閱「Free」方案\n\n![GCP-SendGrid](https://i.imgur.com/eqkuj9g.png)\n\n## 二、主機 Postfix 設定\n\n1. 以 SSH 連線進入主機\n2. 輸入以下指令進行安裝套件及設定\n\n```bash\nsudo umask 077\nsudo yum install cyrus-sasl-plain cyrus-sasl-md5 mailx -y\n\n```bash\n\n3. 編輯 /etc/postfix/main.cf 文件，至文件最底部，貼上以下設定值，並儲存\n\n```bash\nsudo vi /etc/postfix/main.cf\n\n```\n\n```\n貼上以下設定值：\nrelayhost = [smtp.sendgrid.net]:2525\nsmtp_tls_security_level = encrypt\nsmtp_sasl_auth_enable = yes\nsmtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd\nheader_size_limit = 4096000\nsmtp_sasl_security_options = noanonymous\n\n```\n\n![GCP-SendGrid](https://i.imgur.com/gbriLYT.png)\n\n1. 輸入以下指令，建立發信的帳號密碼檔，USERNAME填入剛註冊的帳號(注意是username，不是信箱)，PASSWORD填入註冊密碼\n\n```bash\nsudo echo [smtp.sendgrid.net]:2525 USERNAME:PASSWORD >> /etc/postfix/sasl_passwd\n\n```\n\n2. 輸入以下指令，將上面建立好的檔案，轉成db格式\n\n```bash\nsudo postmap /etc/postfix/sasl_passwd\n\n```\n\n3. 輸入以下指令，確認是否有產生.db的檔案\n\n```bash\nsudo ls -l /etc/postfix/sasl_passwd.db\n\n```\n\n4. 確認建立好後刪除先前的帳號密碼檔\n\n```bash\nsudo rm-rf /etc/postfix/sasl_passwd\n\n```\n\n5. 輸入指令，重啟 postfix，若無錯誤訊息則表示設置成功\n\n```bash\nsudo postfix reload\n\n```\n\n## 三、測試發信\n\n1. 輸入下面指令測試發信，[youremail@example.com](mailto:youremail@example.com) 填入你的信箱，若有收到主旨為\"Test-Email\"，內容為\"Message\"的信件，即表示設定成功！\n\n```bash\necho 'Message.' | mail -s Test-Email youremail@example.com\n\n```\n\n2. 也可使用程式來發信，設定資訊如下：\n    - SMTP\n    - Host: [smtp.sendgrid.net](http://smtp.sendgrid.net/)\n    - Port: 2525\n    - Username: 註冊帳號\n    - Password: 註冊密碼","tags":["GCP","SendGrid"],"categories":["網站架設"]},{"title":"GCP 架站 - 建立 VM 執行個體 + 設定固定 IP","url":"//posts/gcp-vm-website-setting/","content":"\n{% note info %}\n**僅作為個人紀錄使用**\n{% endnote %}\n\n## 一、建立 VM 執行個體\n\n點選「建立執行個體」\n\n![GCP-VM](https://i.imgur.com/jtjYjk5.png)\n\n1. 填寫該執行個體名稱\n2. 根據所在國家及地區選擇適合的區域\n3. 根據網站的所需的規格選擇機器類型，可選擇配好的機器，也可自訂規格，右上角可看到月付的預估值\n4. 配置開機磁碟，點選變更，可選擇該 VM 的作業系統及磁碟類型(永久/SSD)，並配置所需的磁碟空間\n5. 設定防火牆，勾選「允許 HTTP 流量」，若是有網站有 SSL，也一併勾選「允許 HTTPS 流量」\n6. 接著即可按建立，並等待系統建置\n\n<!--more-->\n\n![GCP-VM](https://i.imgur.com/ax9fP4i.png)\n\n![GCP-VM](https://i.imgur.com/OgfJE90.png)\n\n7. 建立完成後，即可在介面看到已建立的 VM\n\n這時可看到預先配置好的臨時 IP，若是將 VM 重新啟動，IP 再次改變，因為還需要將臨時外部 IP 位址改為靜態IP位址，供網站 DNS 使用\n\n![GCP-VM](https://i.imgur.com/PepcA3X.png)\n\n## 二、設定固定 IP\n\n1. 至 \" VPC 網路->外部 IP 位址\" 的地方，會看到剛 VM 建立用的 IP，其類型為「臨時」，將類型由「臨時」改為「靜態」\n2. 此時會跳出「預約新的靜態 IP 位址」，填入可識別的名稱確認送出\n\n![GCP-VM](https://i.imgur.com/E2rsZyc.png)\n\n![GCP-VM](https://i.imgur.com/ve85nqY.png)\n\n3. 回到外部IP位址頁面，即可看到 IP 類型已成功改為「靜態」囉\n4. 之後即可設定網站DNS，將A紀錄指向這組IP，即可以網域瀏覽該主機架好的網站\n\n![GCP-VM](https://i.imgur.com/3hqaggK.png)","tags":["GCP","Elastic IP"],"categories":["網站架設"]},{"title":"SSL 安全憑證設定 (Apache + CentOS 7）","url":"//posts/ssl-setting-apache-centos-7/","content":"\n{% note info %}\n**僅作為個人紀錄使用**\n{% endnote %}\n\n## 1. 取得 SSL 憑證檔案\n\n申請 SSL 憑證後，通常會獲得以下檔案：  \n\n- `certificate.crt` – **伺服器憑證**（主要憑證）  \n- `private.key` – **憑證私鑰**（用於驗證伺服器身份，請妥善保管）  \n- `ca_bundle.crt` – **中繼憑證**（根憑證與中介憑證的組合，部分 CA 可能不提供）  \n\n> 如果你的 SSL 憑證發行商提供的是 `.pem` 格式，可能需要轉換或拆分成 `.crt` 和 `.key` 以符合 Apache 的需求。  \n\n<!--more-->\n\n## 2. 將憑證檔案放置到指定目錄\n\n### 預設憑證存放目錄（CentOS 7）\n預設路徑 `/etc/pki/tls/certs/`  \n\n你也可以使用其他目錄，但請確保 Apache 能夠存取這些檔案。  \n\n# 設定適當的權限（私鑰應該限制存取）\n```bash\nchmod 600 /etc/pki/tls/certs/private.key\n```\n\n## 3. 安裝 Apache SSL 模組\n如果你的 Apache 尚未啟用 SSL，請安裝 mod_ssl 模組：\n\n```bash\nyum -y install mod_ssl\n```\n安裝後，Apache 會在 /etc/httpd/conf.d/ 目錄下自動建立 ssl.conf 設定檔。\n\n\n## 4. 查找 SSL 設定檔案路徑\n可以使用以下指令確認 ssl.conf 的位置：\n```bash\ngrep -i -r \"SSLCertificateFile\" /etc/httpd/\n```\n\n預設情況下，設定檔應位於：\n/etc/httpd/conf.d/ssl.conf\n\n## 5. 設定 SSL 憑證\n使用 vi 或 nano 編輯 ssl.conf 設定檔：\n\n```bash\nvi /etc/httpd/conf.d/ssl.conf\n```\n找到並修改以下設定（根據你的憑證檔案路徑調整）：\n\n```bash\n<VirtualHost *:443>\n    DocumentRoot \"/var/www/html\"\n    ServerName www.example.com:443\n\n    SSLEngine on\n    SSLProtocol all -SSLv2 -SSLv3  # 禁用過時的 SSLv2 和 SSLv3，防止 POODLE 攻擊\n    SSLCertificateFile /etc/pki/tls/certs/certificate.crt # 根據檔案路徑\n    SSLCertificateKeyFile /etc/pki/tls/certs/private.key # 根據檔案路徑\n    SSLCertificateChainFile /etc/pki/tls/certs/ca_bundle.crt # 根據檔案路徑\n\n    # 強制 HTTPS 重導向（可選）\n    <IfModule mod_rewrite.c>\n        RewriteEngine On\n        RewriteCond %{HTTPS} off\n        RewriteRule ^(.*)$ https://%{HTTP_HOST}/$1 [R=301,L]\n    </IfModule>\n</VirtualHost>\n```\n> 注意\n> 某些 SSL 憑證可能沒有 ca_bundle.crt，如果 SSLCertificateChainFile 缺少或導致錯誤，請註解該行。\n\n\n### 6. 重啟 Apache\n\n```bash\nsystemctl restart httpd\n```\n\n### 7. 測試 SSL 連線\n\n前往目標網站看看是否能夠正常連線","tags":["CentOS","SSL","Apache"],"categories":["網站架設"]}]